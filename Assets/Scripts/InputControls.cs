//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Joints"",
            ""id"": ""5294cf23-8464-43f0-b032-d81919556858"",
            ""actions"": [
                {
                    ""name"": ""swing"",
                    ""type"": ""Value"",
                    ""id"": ""f57141ec-92d1-4389-a19f-41111285a377"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""launch"",
                    ""type"": ""Value"",
                    ""id"": ""cb983ce3-01e7-4cb7-bd38-e1674e8bc7e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""сharge"",
                    ""type"": ""Value"",
                    ""id"": ""bad6519e-213d-473d-bd3e-60df8b6684ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c31f854-d10c-471d-abfc-399dd378093c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c3acf7b-63fe-4e02-98d9-dc114faf4921"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b74f427-2c11-4421-8f83-b0082a1ce569"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""сharge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Joints
        m_Joints = asset.FindActionMap("Joints", throwIfNotFound: true);
        m_Joints_swing = m_Joints.FindAction("swing", throwIfNotFound: true);
        m_Joints_launch = m_Joints.FindAction("launch", throwIfNotFound: true);
        m_Joints_сharge = m_Joints.FindAction("сharge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Joints
    private readonly InputActionMap m_Joints;
    private List<IJointsActions> m_JointsActionsCallbackInterfaces = new List<IJointsActions>();
    private readonly InputAction m_Joints_swing;
    private readonly InputAction m_Joints_launch;
    private readonly InputAction m_Joints_сharge;
    public struct JointsActions
    {
        private @InputControls m_Wrapper;
        public JointsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @swing => m_Wrapper.m_Joints_swing;
        public InputAction @launch => m_Wrapper.m_Joints_launch;
        public InputAction @сharge => m_Wrapper.m_Joints_сharge;
        public InputActionMap Get() { return m_Wrapper.m_Joints; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JointsActions set) { return set.Get(); }
        public void AddCallbacks(IJointsActions instance)
        {
            if (instance == null || m_Wrapper.m_JointsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JointsActionsCallbackInterfaces.Add(instance);
            @swing.started += instance.OnSwing;
            @swing.performed += instance.OnSwing;
            @swing.canceled += instance.OnSwing;
            @launch.started += instance.OnLaunch;
            @launch.performed += instance.OnLaunch;
            @launch.canceled += instance.OnLaunch;
            @сharge.started += instance.OnСharge;
            @сharge.performed += instance.OnСharge;
            @сharge.canceled += instance.OnСharge;
        }

        private void UnregisterCallbacks(IJointsActions instance)
        {
            @swing.started -= instance.OnSwing;
            @swing.performed -= instance.OnSwing;
            @swing.canceled -= instance.OnSwing;
            @launch.started -= instance.OnLaunch;
            @launch.performed -= instance.OnLaunch;
            @launch.canceled -= instance.OnLaunch;
            @сharge.started -= instance.OnСharge;
            @сharge.performed -= instance.OnСharge;
            @сharge.canceled -= instance.OnСharge;
        }

        public void RemoveCallbacks(IJointsActions instance)
        {
            if (m_Wrapper.m_JointsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJointsActions instance)
        {
            foreach (var item in m_Wrapper.m_JointsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JointsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JointsActions @Joints => new JointsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IJointsActions
    {
        void OnSwing(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnСharge(InputAction.CallbackContext context);
    }
}
